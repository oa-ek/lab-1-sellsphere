// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SellSphere.Core;

#nullable disable

namespace SellSphere.Core.Migrations
{
    [DbContext(typeof(SellSphereContext))]
    [Migration("20231027152820_yii")]
    partial class yii
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5b2fe19c-1017-4a48-98d9-bba2c4362b47",
                            ConcurrencyStamp = "4f06ad54-7b65-4fef-84b2-1cd78da79714",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c7e89502-33a8-4ebe-b890-7775a3395415",
                            ConcurrencyStamp = "edd5842f-5c2c-42da-aad2-fad38582f5b5",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "3ebcd806-3dba-4b8e-a8e3-1c31a30183bb",
                            ConcurrencyStamp = "40376b07-e3e5-417f-842c-1ec4eaae3ff8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "84d92f44-f40d-4900-8146-f46611ca9f54",
                            RoleId = "5b2fe19c-1017-4a48-98d9-bba2c4362b47"
                        },
                        new
                        {
                            UserId = "84d92f44-f40d-4900-8146-f46611ca9f54",
                            RoleId = "c7e89502-33a8-4ebe-b890-7775a3395415"
                        },
                        new
                        {
                            UserId = "84d92f44-f40d-4900-8146-f46611ca9f54",
                            RoleId = "3ebcd806-3dba-4b8e-a8e3-1c31a30183bb"
                        },
                        new
                        {
                            UserId = "857070da-1bab-44d9-8db1-1b8dd7aa7d1c",
                            RoleId = "c7e89502-33a8-4ebe-b890-7775a3395415"
                        },
                        new
                        {
                            UserId = "857070da-1bab-44d9-8db1-1b8dd7aa7d1c",
                            RoleId = "3ebcd806-3dba-4b8e-a8e3-1c31a30183bb"
                        },
                        new
                        {
                            UserId = "fcdce36b-a6d9-4d51-a2db-2911e996635f",
                            RoleId = "3ebcd806-3dba-4b8e-a8e3-1c31a30183bb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SellSphere.Core.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"), 1L, 1);

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            ActivityName = "Приватний"
                        },
                        new
                        {
                            ActivityId = 2,
                            ActivityName = "Бізнес"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Тварини"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Електроніка"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Бізнес та послуги"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Хобі, відпочинок і спорт"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Дім та сад"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Дитячий світ"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Мода і стиль"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"), 1L, 1);

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionId");

                    b.ToTable("Conditions");

                    b.HasData(
                        new
                        {
                            ConditionId = 1,
                            ConditionName = "Новий"
                        },
                        new
                        {
                            ConditionId = 2,
                            ConditionName = "Б/У"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"), 1L, 1);

                    b.Property<string>("DeliveryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryId");

                    b.ToTable("Deliveries");

                    b.HasData(
                        new
                        {
                            DeliveryId = 1,
                            DeliveryName = "Нова Пошта"
                        },
                        new
                        {
                            DeliveryId = 2,
                            DeliveryName = "Укрпошта"
                        },
                        new
                        {
                            DeliveryId = 3,
                            DeliveryName = "Meest"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Goods", b =>
                {
                    b.Property<int>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoodsId"), 1L, 1);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GoodsId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Goodes");

                    b.HasData(
                        new
                        {
                            GoodsId = 1,
                            ActivityId = 1,
                            CategoryId = 2,
                            ConditionId = 2,
                            DeliveryId = 1,
                            Description = "ноутбук в гарному стані, є невеликі подряпини, екран не битий, 15.6 дюймів",
                            GoodsName = "Ноутбук",
                            ImgPath = "\\Images\\acer.jpg",
                            LocationId = 1,
                            PhoneNumber = "0685894567",
                            Price = 35440,
                            PublicationDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "fcdce36b-a6d9-4d51-a2db-2911e996635f"
                        },
                        new
                        {
                            GoodsId = 2,
                            ActivityId = 1,
                            CategoryId = 4,
                            ConditionId = 2,
                            DeliveryId = 1,
                            Description = "Велосипед використовувався 1 рік, є незначні пошкодженння, ТО робилося кожних 200 км",
                            GoodsName = "Велосипед",
                            ImgPath = "\\Images\\velik.jpg",
                            LocationId = 3,
                            PhoneNumber = "0975894567",
                            Price = 66700,
                            PublicationDate = new DateTime(2023, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "fcdce36b-a6d9-4d51-a2db-2911e996635f"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            LocationName = "Чернігів"
                        },
                        new
                        {
                            LocationId = 2,
                            LocationName = "Київ"
                        },
                        new
                        {
                            LocationId = 3,
                            LocationName = "Луцьк"
                        },
                        new
                        {
                            LocationId = 4,
                            LocationName = "Житомир"
                        },
                        new
                        {
                            LocationId = 5,
                            LocationName = "Рівне"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "84d92f44-f40d-4900-8146-f46611ca9f54",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1162190-f6fa-4e4b-8b21-5effa22e788b",
                            Email = "admin@sellsphere.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SELLSPHERE.COM",
                            NormalizedUserName = "ADMIN@SELLSPHERE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGRP11TQmB3vUHhs4NM5TK2mxtBqzODRQxcoNRlmRcyvmDfoqRN54DQpeVht1ylswA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a811c8a-1edd-4aa3-92a0-8ca6cbfe6daf",
                            TwoFactorEnabled = false,
                            UserName = "admin@sellsphere.com"
                        },
                        new
                        {
                            Id = "857070da-1bab-44d9-8db1-1b8dd7aa7d1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e67ceb2-8b8b-436f-b5eb-1d194973e50f",
                            Email = "moder@sellsphere.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODER@SELLSPHERE.COM",
                            NormalizedUserName = "MODER@SELLSPHERE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMXOwjqU96OPScLfCH2K6OKvr0ZoR66tmlqUlHTVypwzRicaqdXOYYfjnPVX5VzHWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "795a335d-b9d7-4cd5-837e-4c3f3f81e718",
                            TwoFactorEnabled = false,
                            UserName = "moder@sellsphere.com"
                        },
                        new
                        {
                            Id = "fcdce36b-a6d9-4d51-a2db-2911e996635f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02de960b-2d1f-4b97-850c-a64c19d70a42",
                            Email = "user@sellsphere.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@SELLSPHERE.COM",
                            NormalizedUserName = "USER@SELLSPHERE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMdw9xi13uqon8YNYpVarBmAmhAED66q9E2v/UzDXRjthzl5oK1ZdY6QVTQU07m3WQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0cac41be-14bb-4037-aff9-9fa82fe582af",
                            TwoFactorEnabled = false,
                            UserName = "user@sellsphere.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SellSphere.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SellSphere.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SellSphere.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SellSphere.Core.Goods", b =>
                {
                    b.HasOne("SellSphere.Core.Activity", "Activity")
                        .WithMany("Goods")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.Category", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.Condition", "Condition")
                        .WithMany("Goods")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.Delivery", "Delivery")
                        .WithMany("Goods")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.Location", "Location")
                        .WithMany("Goods")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Activity");

                    b.Navigation("Category");

                    b.Navigation("Condition");

                    b.Navigation("Delivery");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SellSphere.Core.Activity", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.Category", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.Condition", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.Delivery", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.Location", b =>
                {
                    b.Navigation("Goods");
                });
#pragma warning restore 612, 618
        }
    }
}
