// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SellSphere.Core;

#nullable disable

namespace SellSphere.Core.Migrations
{
    [DbContext(typeof(SellSphereDbContext))]
    partial class SellSphereDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "70a6ec90-4d04-49c5-9180-44010eba48c1",
                            ConcurrencyStamp = "a278f58c-8d04-4eeb-82c1-e76c17deab01",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "929c1887-ba7c-4009-8f44-0aebe65bdb1b",
                            ConcurrencyStamp = "1ce867b6-dc1f-4d01-8211-7e8fc639f61c",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "1b758f60-da06-4ab0-b78d-097055beda09",
                            ConcurrencyStamp = "afc52d8c-f8c8-4d23-a0fb-815649eb118f",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "087c7c42-eb78-4673-ba95-1f9382faf1b7",
                            RoleId = "70a6ec90-4d04-49c5-9180-44010eba48c1"
                        },
                        new
                        {
                            UserId = "087c7c42-eb78-4673-ba95-1f9382faf1b7",
                            RoleId = "929c1887-ba7c-4009-8f44-0aebe65bdb1b"
                        },
                        new
                        {
                            UserId = "087c7c42-eb78-4673-ba95-1f9382faf1b7",
                            RoleId = "1b758f60-da06-4ab0-b78d-097055beda09"
                        },
                        new
                        {
                            UserId = "e5c98b96-80ba-4d1c-bd2c-534b33f98e37",
                            RoleId = "929c1887-ba7c-4009-8f44-0aebe65bdb1b"
                        },
                        new
                        {
                            UserId = "e5c98b96-80ba-4d1c-bd2c-534b33f98e37",
                            RoleId = "1b758f60-da06-4ab0-b78d-097055beda09"
                        },
                        new
                        {
                            UserId = "edcb8072-ad0d-49ad-9f0c-e92bac37f5d8",
                            RoleId = "1b758f60-da06-4ab0-b78d-097055beda09"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SellSphere.Core.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"), 1L, 1);

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            ActivityName = "Приватний"
                        },
                        new
                        {
                            ActivityId = 2,
                            ActivityName = "Бізнес"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Тварини"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Електроніка"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Бізнес та послуги"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Хобі, відпочинок і спорт"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Дім та сад"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Дитячий світ"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Мода і стиль"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"), 1L, 1);

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionId");

                    b.ToTable("Conditions");

                    b.HasData(
                        new
                        {
                            ConditionId = 1,
                            ConditionName = "Новий"
                        },
                        new
                        {
                            ConditionId = 2,
                            ConditionName = "Б/У"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Contacts", b =>
                {
                    b.Property<int>("ContactsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactsId"), 1L, 1);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactsId");

                    b.ToTable("Contactses");

                    b.HasData(
                        new
                        {
                            ContactsId = 1,
                            ContactPerson = "Іван Іванов Іванович",
                            EmailPerson = "ivan@sellsphere.com",
                            PhoneNumberPerson = "0681471239"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"), 1L, 1);

                    b.Property<string>("DeliveryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryId");

                    b.ToTable("Deliveries");

                    b.HasData(
                        new
                        {
                            DeliveryId = 1,
                            DeliveryName = "Нова Пошта"
                        },
                        new
                        {
                            DeliveryId = 2,
                            DeliveryName = "Укрпошта"
                        },
                        new
                        {
                            DeliveryId = 3,
                            DeliveryName = "Meest"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Goods", b =>
                {
                    b.Property<int>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoodsId"), 1L, 1);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("ContactsId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodIconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GoodsId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("ContactsId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Goodes");

                    b.HasData(
                        new
                        {
                            GoodsId = 1,
                            ActivityId = 1,
                            CategoryId = 2,
                            ConditionId = 2,
                            ContactsId = 1,
                            DeliveryId = 1,
                            Description = "ноутбук в гарному стані, є невеликі подряпини, екран не битий, 15.6 дюймів",
                            GoodIconPath = "\\Images\\acer.jpg",
                            GoodsName = "Ноутбук",
                            LocationId = 1,
                            Price = 35440,
                            PublicationDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "edcb8072-ad0d-49ad-9f0c-e92bac37f5d8"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            LocationName = "Чернігів"
                        },
                        new
                        {
                            LocationId = 2,
                            LocationName = "Київ"
                        },
                        new
                        {
                            LocationId = 3,
                            LocationName = "Луцьк"
                        },
                        new
                        {
                            LocationId = 4,
                            LocationName = "Житомир"
                        },
                        new
                        {
                            LocationId = 5,
                            LocationName = "Рівне"
                        });
                });

            modelBuilder.Entity("SellSphere.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "087c7c42-eb78-4673-ba95-1f9382faf1b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59c6b45e-9282-42af-a46b-a603fbfa96ad",
                            Email = "admin@sellsphere.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SELLSPHERE.COM",
                            NormalizedUserName = "ADMIN@SELLSPHERE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJplg7nYc6PdvAihtV5PnBtGSKiJx5emDKELsEYBQMHXiEgjxRPw9iZTJ7zEEmjfjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77dfad86-e13f-418d-815f-c71e7b113be8",
                            TwoFactorEnabled = false,
                            UserName = "admin@sellsphere.com"
                        },
                        new
                        {
                            Id = "e5c98b96-80ba-4d1c-bd2c-534b33f98e37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffede050-6bca-41f1-b6a1-16d6a6d38403",
                            Email = "moder@sellsphere.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODER@SELLSPHERE.COM",
                            NormalizedUserName = "MODER@SELLSPHERE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN//n/ALYm5lkYmdGCbtbtIQIjuWbDMXIFiY/Kt96e5GjalACYFnWJ7sB8lgIFTxlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1492cf8d-2d15-463b-a07b-b999bd04c35f",
                            TwoFactorEnabled = false,
                            UserName = "moder@sellsphere.com"
                        },
                        new
                        {
                            Id = "edcb8072-ad0d-49ad-9f0c-e92bac37f5d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91b8f9ef-6c67-4f79-94d2-564f39856a10",
                            Email = "user@sellsphere.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@SELLSPHERE.COM",
                            NormalizedUserName = "USER@SELLSPHERE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKIpVJnDaC8GcZSDRSKv/V+bzXeUh0f70HFNTc1BV1iF10vyeo/hRyMGZOQvcj9uyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80e5a777-a326-490f-808f-25f409974d02",
                            TwoFactorEnabled = false,
                            UserName = "user@sellsphere.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SellSphere.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SellSphere.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SellSphere.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SellSphere.Core.Goods", b =>
                {
                    b.HasOne("SellSphere.Core.Activity", "Activity")
                        .WithMany("Goods")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.Category", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.Condition", "Condition")
                        .WithMany("Goods")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.Contacts", "Contacts")
                        .WithMany("Goods")
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.Delivery", "Delivery")
                        .WithMany("Goods")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.Location", "Location")
                        .WithMany("Goods")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSphere.Core.User", "User")
                        .WithMany("Goodes")
                        .HasForeignKey("UserId");

                    b.Navigation("Activity");

                    b.Navigation("Category");

                    b.Navigation("Condition");

                    b.Navigation("Contacts");

                    b.Navigation("Delivery");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SellSphere.Core.Activity", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.Category", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.Condition", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.Contacts", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.Delivery", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.Location", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SellSphere.Core.User", b =>
                {
                    b.Navigation("Goodes");
                });
#pragma warning restore 612, 618
        }
    }
}
